(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory();
    } else if (typeof root["App"] === 'undefined' || root["App"] !== Object(root["App"])) {
        throw new Error('templatizer: window["App"] does not exist or is not an object');
    } else {
        root["App"].templatizer = factory();
    }
}(this, function () {
    var jade=function(){function e(e){return null!=e&&""!==e}function n(t){return(Array.isArray(t)?t.map(n):t&&"object"==typeof t?Object.keys(t).filter(function(e){return t[e]}):[t]).filter(e).join(" ")}var t={};return t.merge=function r(n,t){if(1===arguments.length){for(var a=n[0],i=1;i<n.length;i++)a=r(a,n[i]);return a}var o=n["class"],s=t["class"];(o||s)&&(o=o||[],s=s||[],Array.isArray(o)||(o=[o]),Array.isArray(s)||(s=[s]),n["class"]=o.concat(s).filter(e));for(var l in t)"class"!=l&&(n[l]=t[l]);return n},t.joinClasses=n,t.cls=function(e,r){for(var a=[],i=0;i<e.length;i++)a.push(r&&r[i]?t.escape(n([e[i]])):n(e[i]));var o=n(a);return o.length?' class="'+o+'"':""},t.style=function(e){return e&&"object"==typeof e?Object.keys(e).map(function(n){return n+":"+e[n]}).join(";"):e},t.attr=function(e,n,r,a){return"style"===e&&(n=t.style(n)),"boolean"==typeof n||null==n?n?" "+(a?e:e+'="'+e+'"'):"":0==e.indexOf("data")&&"string"!=typeof n?(-1!==JSON.stringify(n).indexOf("&")&&console.warn("Since Jade 2.0.0, ampersands (`&`) in data attributes will be escaped to `&amp;`"),n&&"function"==typeof n.toISOString&&console.warn("Jade will eliminate the double quotes around dates in ISO form after 2.0.0")," "+e+"='"+JSON.stringify(n).replace(/'/g,"&apos;")+"'"):r?(n&&"function"==typeof n.toISOString&&console.warn("Jade will stringify dates in ISO form after 2.0.0")," "+e+'="'+t.escape(n)+'"'):(n&&"function"==typeof n.toISOString&&console.warn("Jade will stringify dates in ISO form after 2.0.0")," "+e+'="'+n+'"')},t.attrs=function(e,r){var a=[],i=Object.keys(e);if(i.length)for(var o=0;o<i.length;++o){var s=i[o],l=e[s];"class"==s?(l=n(l))&&a.push(" "+s+'="'+l+'"'):a.push(t.attr(s,l,!1,r))}return a.join("")},t.escape=function(e){var n=String(e).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;");return n===""+e?e:n},t.rethrow=function a(e,n,t,r){if(!(e instanceof Error))throw e;if(!("undefined"==typeof window&&n||r))throw e.message+=" on line "+t,e;try{r=r||require("fs").readFileSync(n,"utf8")}catch(i){a(e,null,t)}var o=3,s=r.split("\n"),l=Math.max(t-o,0),f=Math.min(s.length,t+o),o=s.slice(l,f).map(function(e,n){var r=n+l+1;return(r==t?"  > ":"    ")+r+"| "+e}).join("\n");throw e.path=n,e.message=(n||"Jade")+":"+t+"\n"+o+"\n\n"+e.message,e},t}(); 

    var templatizer = {};


    // _conditionals.jade compiled template
    templatizer["_conditionals"] = function tmpl__conditionals() {
        return '<h2>Conditionals</h2><h3>LESS Guards</h3><div class="example"><pre><code class="language-less">.mixin (@a) when (lightness(@a) >= 50%) {\n  background-color: black;\n}\n.mixin (@a) when (lightness(@a) < 50%) {\n  background-color: white;\n}\n.mixin (@a) {\n  color: @a;\n}\n\n.conditional-example-1 {\n  .mixin(#ddd)\n}\n.conditional-example-2 {\n  .mixin(#555)\n}\n</code></pre><p>Here is what we will get:\n</p><pre><code class="language-css">.conditional-example-1 {\n  background-color: black;\n  color: #dddddd;\n}\n.conditional-example-2 {\n  background-color: white;\n  color: #555555;\n}\n\n</code></pre></div><h3>Sass Conditionals</h3><div class="example"><pre><code class="language-stylus">=mixin($a)\n  @if lightness($a) >= 50%\n    background-color: black\n  @else if lightness($a) < 50%\n    background-color: white\n  color: $a;\n</code></pre><p>Here is what we will get:\n</p><pre><code class="language-css">.conditional-example-1 {\n  background-color: black;\n  color: #ddd;\n}\n.conditional-example-2 {\n  background-color: white;\n  color: #555;\n}\n</code></pre></div><h3>Stylus Conditionals</h3><div class="example"><pre><code class="language-stylus">mixin(a)\n  if lightness(a) >= 50%\n    background-color: black\n  else if lightness(a) < 50%\n    background-color: white\n  color: a;\n\n.conditional-example-1\n  mixin(#ddd)\n.conditional-example-2\n  mixin(#555)\n</code></pre><p>Yields:</p><pre><code class="language-css">.conditional-example-1 {\n  background-color: #000;\n  color: #ddd;\n}\n.conditional-example-2 {\n  background-color: #fff;\n  color: #555;\n}</code></pre></div>';
    };

    // _extend.jade compiled template
    templatizer["_extend"] = function tmpl__extend() {
        return '<h2>Extend</h2><h3>LESS</h3><div class="example"><pre><code class="language-less">.extend-parent-1 {\n  &:extend(.extended-class);\n  background: blue;\n}\n\n.extend-parent-2 {\n  &:extend(.extended-class);\n  background: green;\n}\n\n.extended-class {\n  color: red;\n}\n</code></pre><p>Yields:</p><pre><code class="language-css">.extend-parent-1 {\n  background: blue;\n}\n.extend-parent-2 {\n  background: green;\n}\n.extended-class,\n.extend-parent-1,\n.extend-parent-2 {\n  color: red;\n}\n\n</code></pre></div><h3>Sass</h3><p>Since we can do placeholders we do not need to generate an extra class</p><p><strong>Note:</strong>Sass does not allow nested selectors</p><div class="example"><pre><code class="language-stylus">.extend-parent-1\n  @extend %extended-class\n  background: blue\n\n.extend-parent-2\n  @extend %extended-class\n  background: green\n\n%extended-class\n  color: red\n</code></pre><p>Yields:</p><pre><code class="language-css">.extend-parent-1 {\n  background: blue; }\n\n.extend-parent-2 {\n  background: green; }\n\n.extend-parent-1, .extend-parent-2 {\n  color: red; }\n</code></pre></div><h3>Stylus</h3><p>Again with placeholders</p><div class="example"><pre><code class="language-stylus">$extended-class\n  color red\n\n.extend-parent-1\n  @extend $extended-class\n  background blue\n\n.extend-parent-2\n  @extend $extended-class\n  background green\n</code></pre><p>Note: the extended class comes before it\'s usage (it is CSS after all)</p><pre><code class="language-css">.extend-parent-1,\n.extend-parent-2 {\n  color: #f00;\n}\n.extend-parent-1 {\n  background: #00f;\n}\n.extend-parent-2 {\n  background: #008000;\n}\n</code></pre><h4>Optional Extending</h4><p>Useful if you may or may not want to extend a property based on context</p><pre><code class="language-stylus">$specialDesign\n  color: #FFF\n\n.optional-extend\n  @extend .design !optional, $specialDesign !optional\n</code></pre><pre><code class="language-css">.optional-extend {\n  color: #fff;\n}</code></pre></div>';
    };

    // _overview.jade compiled template
    templatizer["_overview"] = function tmpl__overview() {
        return "<h2>Expressive, robust, feature-rich CSS language built for nodejs</h2><h3>All Features:</h3><ul><li>Optional colons</li><li>Optional semi-colons</li><li>Optional commas</li><li>Optional braces</li><li>Selectors</li><li>Variables</li><li>Interpolation</li><li>Operators</li><li>Mixins</li><li>Functions</li><li>Keyword Arguments</li><li>Built-in Functions</li><li>Rest Params</li><li>Comments</li><li>Conditionals</li><li>Hashes</li><li>Iteration</li><li>@import and @require</li><li>@media</li><li>@font-face</li><li>@keyframes</li><li>Other @-rules</li><li>@extend</li><li>@block</li><li>url()</li><li>CSS Literal</li><li>CSS Style Syntax</li><li>Char Escaping</li><li>Executable</li><li>Error Reporting</li><li>Connect Middleware</li><li>Introspection API</li><li>JavaScript API</li><li>Sourcemaps</li></ul>";
    };

    // _placeholders.jade compiled template
    templatizer["_placeholders"] = function tmpl__placeholders() {
        return '<h2>Placeholders</h2><h3>LESS Placeholder</h3><div class="example"><p>NOPE!</p><p>The closest you can get is mixins but you cannot take advantage of @extend grouping benefits.\n\n</p></div><h3>SASS Placeholder</h3><div class="example"><pre><code class="language-stylus">%placeholder-1\n  color: red\n\n.include-placeholder-1\n  @extend %placeholder-1\n</code></pre><p>Generates:</p><pre><code class="language-css">.include-placeholder-1 {\n  color: red;\n}\n\n</code></pre></div><h3>Stylus Placeholder</h3><div class="example"><pre><code class="language-stylus">$placeholder-1\n  color red\n\n.include-placeholder-1\n  @extend $placeholder-1\n</code></pre><p>Generates:</p><pre><code class="language-css">.include-placeholder-1 {\n  color: #f00;\n}</code></pre></div>';
    };

    // _plugins.jade compiled template
    templatizer["_plugins"] = function tmpl__plugins() {
        return '<h2>Plugins</h2><h3>Nib</h3><div class="example"><a href="http://tj.github.io/nib/">Nib</a><ul><li>Like Compass for stylus</li><li>Built in mixins</li><li>Vendor Prefixes</li></ul></div><h3>Rupture</h3><div class="example"><a href="http://jenius.github.io/rupture/">Rupture</a><ul><li>Easily readable media query mixins</li></ul><pre><code class="language-stylus">+above(48em)\n</code></pre></div><h3>Jeet</h3><div class="example"><a href="http://jeet.gs/">Jeet</a><ul><li>A grid system for humans</li><li>Easy to use powerful grid mixins</li></ul><pre><code class="language-stylus">col(1/4, gutter: .5)\n</code></pre></div><h3>Stylint</h3><div class="example"><a href="https://github.com/rossPatton/stylint">Stylint</a><ul><li>Stylus linting</li></ul></div>';
    };

    // _property_lookup.jade compiled template
    templatizer["_property_lookup"] = function tmpl__property_lookup() {
        return '<h2>Property Lookup</h2><h3>Stylus Only</h3><h4>Centering Content</h4><div class="example"><pre><code class="language-stylus">.property-lookup-center\n  position absolute\n  top 50%\n  left 50%\n  width 150px\n  height 80px\n  margin-left -(@width / 2)\n  margin-top -(@height / 2)\n</code></pre><p>Yields:</p><pre><code class="language-css">.property-lookup-center {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 150px;\n  height: 80px;\n  margin-left: -75px;\n  margin-top: -40px;\n}\n</code></pre></div><h4>Using unless for default</h4><div class="example"><pre><code class="language-stylus">position()\n  position arguments\n  z-index 1 unless @z-index\n\n.property-lookup-unless-1\n  z-index 20\n  position absolute\n\n.property-lookup-unless-2\n  position absolute\n</code></pre><p>Yields:</p><pre><code class="language-css">.property-lookup-unless-1 {\n  z-index: 20;\n  position: absolute;\n}\n.property-lookup-unless-2 {\n  position: absolute;\n  z-index: 1;\n}</code></pre></div>';
    };

    // _syntax.jade compiled template
    templatizer["_syntax"] = function tmpl__syntax() {
        return '<h2>Syntax</h2><hr/><h3>CSS Syntax</h3><div class="example"><div class="syntax-element syntax-css"></div><pre><code class="language-css">.syntax-css {\n  background: red;\n}\n</code></pre></div><h3>Sass Syntax</h3><div class="example"><div class="syntax-element syntax-sass"></div><pre><code class="language-css">.syntax-sass\n  background: green\n\n</code></pre></div><h3>Stripped Down Stylus (AWESOME!!!) Syntax</h3><div class="example"><div class="syntax-element syntax-stylus"></div><pre><code class="language-stylus">.syntax-stylus\n  background blue</code></pre></div>';
    };

    // _nav.jade compiled template
    templatizer["_nav"] = function tmpl__nav() {
        return '<ul class="nav-list"><li class="nav-list-item"><a href="#overview" class="nav-link">Overview</a></li><li class="nav-list-item"><a href="#syntax" class="nav-link">Syntax</a></li><li class="nav-list-item"><a href="#conditionals" class="nav-link">Conditionals</a></li><li class="nav-list-item"><a href="#placeholders" class="nav-link">Placeholders</a></li><li class="nav-list-item"><a href="#extend" class="nav-link">Extend</a></li><li class="nav-list-item"><a href="#property_lookup" class="nav-link">Property Lookup</a></li><li class="nav-list-item"><a href="#plugins" class="nav-link">Plugins</a></li></ul>';
    };

    // index.jade compiled template
    templatizer["index"] = function tmpl_index() {
        return '<!DOCTYPE html(lang=\'en\')><head><title>Stylus</title><meta name="viewport" content="width=device-width, initial-scale=1"/><meta http-equiv="Content-Type" content="text/html;charset=utf-8"/><link rel="stylesheet" type="text/css" href="css/styl.css"/></head><body><header class="header container"><h1 class="header-name">Stylus</h1><ul class="nav-list"><li class="nav-list-item"><a href="#overview" class="nav-link">Overview</a></li><li class="nav-list-item"><a href="#syntax" class="nav-link">Syntax</a></li><li class="nav-list-item"><a href="#conditionals" class="nav-link">Conditionals</a></li><li class="nav-list-item"><a href="#placeholders" class="nav-link">Placeholders</a></li><li class="nav-list-item"><a href="#extend" class="nav-link">Extend</a></li><li class="nav-list-item"><a href="#property_lookup" class="nav-link">Property Lookup</a></li><li class="nav-list-item"><a href="#plugins" class="nav-link">Plugins</a></li></ul></header><section data-content-block="data-content-block" class="container"></section><script src="../jquery/dist/jquery.min.js" type="text/javascript"></script><script src="../js/lib/prism.js" type="text/javascript"></script><script src="../js/app.js" type="text/javascript"></script><script src="../templatizer.js" type="text/javascript"></script></body>';
    };

    return templatizer;
}));